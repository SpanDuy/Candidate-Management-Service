openapi: 3.0.3
info:
  title: Candidate Management Service
  description: Candidate Management Service
  version: 1.0.0
  contact:
    email: hdhrbux@gmail.com
servers:
  - url: http://localhost:8080
    description: Dev server

paths:
  /api/v1/candidates/find:
    post:
      tags:
        - candidate
      summary: Pagination and filtration of candidates
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateSearchCriteria'
            examples:
              Find candidates with name like John:
                value:
                  firstName: "John"
              Find candidates with description like description and CV file like .pdf:
                value:
                  description: "description"
                  cvFile: ".pdf"
        parameters:
          - name: page
            in: query
            description: Page number (default is 0)
            required: false
            schema:
              type: integer
              minimum: 0
            example: 0
          - name: pageSize
            in: query
            description: Number of items per page (default is 5)
            required: false
            schema:
              type: integer
              minimum: 1
            example: 5

  /api/v1/candidates/create:
    post:
      tags:
        - candidate
      summary: Create a new candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateDto'
            examples:
              Create candidates with name John and lastname Doe:
                value:
                  firstName: "John"
                  lastName: "Doe"

  /api/v1/candidates/update/{id}:
    put:
      tags:
        - candidate
      summary: Update an existing candidate
      parameters:
        - name: id
          example: 1
          in: path
          required: true
          description: Candidate ID to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateUpdateDto'
            examples:
              Create candidates with name John and lastname Doe:
                value:
                  id: 1
                  firstName: "Vlad"

  /api/v1/candidate-tests/find:
    post:
      tags:
        - candidate-test
      summary: Pagination and filtration of candidate tests
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTestSearchCriteria'
            examples:
              Find candidate tests with grate equals 85:
                value:
                  testResults:
                    grate: 85
      parameters:
        - name: page
          in: query
          description: Page number (default is 0)
          required: false
          schema:
            type: integer
            minimum: 0
          example: 0
        - name: pageSize
          in: query
          description: Number of items per page (default is 5)
          required: false
          schema:
            type: integer
            minimum: 1
          example: 5

  /api/v1/candidate-tests/create:
    post:
      tags:
        - candidate-test
      summary: Create a new candidate test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTestCreateDto'
            examples:
              Create candidate tests with candidate id = 1, test id = 2 and test results {("2022-03-05", 90), ("2022-03-06", 85)}:
                value:
                  candidate: 1
                  test: 2
                  testResults:
                    - date: "2022-03-05"
                      grade: 90
                    - date: "2022-03-06"
                      grade: 85


  /api/v1/candidate-tests/update/{id}:
    put:
      tags:
        - candidate-test
      summary: Update an existing candidate test
      parameters:
        - name: id
          example: 1
          in: path
          required: true
          description: Candidate test ID to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTestUpdateDto'
            examples:
              Update candidate tests with candidate test id = 1 and addition test results {("2022-03-07", 95)}:
                value:
                  id: 1
                  testResults:
                    - date: "2022-03-07"
                      grade: 95

  /api/v1/directions/find:
    post:
      tags:
        - direction
      summary: Pagination and filtration of directions
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectionSearchCriteria'
            examples:
              Find direction with name like direction:
                value:
                  name: "Direction"

  /api/v1/directions/create:
    post:
      tags:
        - direction
      summary: Create a new direction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectionCreateDto'
            examples:
              Create direction with name 'direction 3' and description 'description 3':
                value:
                  name: "Direction 3"
                  description: "Description 3"

  /api/v1/directions/update/{id}:
    put:
      tags:
        - direction
      summary: Update an existing direction
      parameters:
        - name: id
          example: 1
          in: path
          required: true
          description: Direction ID to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectionUpdateDto'
            examples:
              Update direction with name id = 1 and rename description to 'new description 1':
                value:
                  id: 1
                  description: "New description 1"

  /api/v1/tests/find:
    post:
      tags:
        - test
      summary: Pagination and filtration of tests
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSearchCriteria'
            examples:
              Find tests with name like 'Test 1':
                value:
                  name: "Test 1"

  /api/v1/tests/create:
    post:
      tags:
        - test
      summary: Create a new test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCreateDto'
            examples:
              Create tests with name 'Test 3' and description 'Description for Test 3':
                value:
                  name: "Test 3"
                  description: "Description for Test 3"
                  applicableDirections:
                    - 2
                    - 3

  /api/v1/tests/update/{id}:
    put:
      tags:
        - test
      summary: Update an existing test
      parameters:
        - name: id
          example: 1
          in: path
          required: true
          description: Test ID to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestUpdateDto'
            examples:
              Update tests with id = 1 and new name 'new Test 1':
                value:
                  id: 1
                  name: "new Test 1"


components:
  schemas:
    CandidateSearchCriteria:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        photo:
          type: string
        description:
          type: string
        cvFile:
          type: string

    CandidateListDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        photo:
          type: string
        description:
          type: string
        cvFile:
          type: string
        possibleDirections:
          type: array
          items:
            $ref: '#/components/schemas/DirectionListDto'

    CandidateCreateDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        middleName:
          type: string
        photo:
          type: string
        description:
          type: string
        cvFile:
          type: string
        possibleDirections:
          type: array
          items:
            type: integer

    CandidateUpdateDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        photo:
          type: string
        description:
          type: string
        cvFile:
          type: string
        possibleDirections:
          type: array
          items:
            type: integer

    CandidateTestCreateDto:
      type: object
      properties:
        candidate:
          type: integer
        test:
          type: integer
        testResults:
          type: array
          items:
            $ref: '#/components/schemas/TestResultDto'

    CandidateTestListDto:
      type: object
      properties:
        id:
          type: integer
        candidate:
          $ref: '#/components/schemas/CandidateListDto'
        test:
          $ref: '#/components/schemas/TestListDto'
        testResults:
          type: array
          items:
            $ref: '#/components/schemas/TestResultDto'
          example:

    CandidateTestSearchCriteria:
      type: object
      properties:
        testResults:
          $ref: '#/components/schemas/TestResultSearchCriteria'

    CandidateTestUpdateDto:
      type: object
      properties:
        id:
          type: integer
        candidate:
          type: integer
        test:
          type: integer
        testResults:
          type: array
          items:
            $ref: '#/components/schemas/TestResultDto'

    DirectionCreateDto:
      type: object
      properties:
        name:
          type: string
          example: "Engineering"
        description:
          type: string
          example: "Description of the Engineering direction"
      required:
        - name
        - description

    DirectionListDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Engineering"
        description:
          type: string
          example: "Description of the Engineering direction"

    DirectionSearchCriteria:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    DirectionUpdateDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Updated Engineering"
        description:
          type: string
          example: "Updated description of the Engineering direction"

    TestCreateDto:
      type: object
      properties:
        name:
          type: string
          example: "Java Test"
        description:
          type: string
          example: "Test for Java skills"
        applicableDirections:
          type: array
          items:
            type: integer
          example: [1, 2]
      required:
        - name
        - description
        - applicableDirections

    TestListDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Java Test"
        description:
          type: string
          example: "Test for Java skills"
        applicableDirections:
          type: array
          items:
            $ref: '#/components/schemas/DirectionListDto'

    TestSearchCriteria:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    TestUpdateDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Updated Java Test"
        description:
          type: string
          example: "Updated test for Java skills"
        applicableDirections:
          type: array
          items:
            type: integer
          example: [2, 3]

    TestResultDto:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2022-12-31"
        grade:
          type: integer
          example: 90
      required:
        - date
        - grade

    TestResultSearchCriteria:
      type: object
      properties:
        dateGt:
          type: string
          format: date
        dateLt:
          type: string
          format: date
        grade:
          type: integer